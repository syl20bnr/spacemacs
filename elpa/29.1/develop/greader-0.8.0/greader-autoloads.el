;;; greader-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from greader.el

(autoload 'greader-mode "greader" "\
Toggle greader mode on or off.

This is a minor mode.  If called interactively, toggle the
`greader mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `greader-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{greader-mode-map}

(fn &optional ARG)" t)
(autoload 'greader-reading-mode "greader" "\
Toggle Greader-Reading mode on or off.

This is a minor mode.  If called interactively, toggle the
`Greader-Reading mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `greader-reading-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{greader-reading-map}

(fn &optional ARG)")
(defvar greader-auto-bookmark-mode nil "\
Non-nil if Greader-Auto-Bookmark mode is enabled.
See the `greader-auto-bookmark-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `greader-auto-bookmark-mode'.")
(custom-autoload 'greader-auto-bookmark-mode "greader" nil)
(autoload 'greader-auto-bookmark-mode "greader" "\
Enable automatic bookmarking.

Each time the reading of the buffer is stopped a bookmark is saved
when the buffer is visiting a file.

This is a global minor mode.  If called interactively, toggle the
`Greader-Auto-Bookmark mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='greader-auto-bookmark-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(defvar greader-compile-dictsource nil "\
Location of espeak dictionary source data.
You must configure this variable in order to use
  `greader-compile-mode'.")
(custom-autoload 'greader-compile-dictsource "greader" t)
(autoload 'greader-queue-mode "greader" "\
In this mode, text reading occurs via blocks.

normally greader reads the text of a buffer sequentially; in queue-mode you add blocks of text to a queue, so you can choose only certain parts of the buffer.
As reading progresses, further blocks can be added,
or you can add the blocks and then start reading.

This is a minor mode.  If called interactively, toggle the
`greader-queue mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `greader-queue-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{greader-queue-mode-map}

(fn &optional ARG)" t)
(autoload 'greader-enriched-mode "greader" "\
This mode causes greader to announce clickable objects.

To configure the message with which it must be announced
the element, configure the `greader-enriched-tag' variable.

This is a minor mode.  If called interactively, toggle the
`Greader-Enriched mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `greader-enriched-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "greader" '("greader-" "set-bookmark-for-greader"))


;;; Generated autoloads from greader-espeak.el

(autoload 'greader-espeak "greader-espeak" "\
Back-end main function of greader-espeak.
COMMAND must be a string suitable for `make-process'.

(fn COMMAND &optional ARG &rest _)")
(register-definition-prefixes "greader-espeak" '("greader-espeak-"))


;;; Generated autoloads from greader-mac.el

(autoload 'greader-mac "greader-mac" "\
Back-end main function of greader-mac.
COMMAND must be a string suitable for `make-process'.

(fn COMMAND &optional ARG &rest _)")
(register-definition-prefixes "greader-mac" '("greader-"))


;;; Generated autoloads from greader-speechd.el

(autoload 'greader-speechd "greader-speechd" "\
greader speech-dispatcher back-end.

(fn COMMAND &optional ARG &rest _)")
(register-definition-prefixes "greader-speechd" '("greader-speechd-"))

;;; End of scraped data

(provide 'greader-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; greader-autoloads.el ends here
