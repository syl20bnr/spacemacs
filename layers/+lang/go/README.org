#+TITLE: GO layer

[[file:img/go.png]]

* Table of Contents                                         :TOC_4_gh:noexport:
- [[#description][Description]]
  - [[#features][Features:]]
- [[#install][Install]]
  - [[#pre-requisites][Pre-requisites]]
  - [[#layer][Layer]]
- [[#configuration][Configuration]]
  - [[#indentation][Indentation]]
  - [[#tests][Tests]]
  - [[#guru][Guru]]
  - [[#autocomplete][Autocomplete]]
- [[#working-with-go][Working with Go]]
  - [[#go-commands-start-with-m][Go commands (start with =m=):]]
  - [[#go-guru][Go Guru]]

* Description
This layer adds extensive support for go.

** Features:
- gofmt/goimports on file save
- Auto-completion using [[https://github.com/nsf/gocode/tree/master/emacs][go-autocomplete]] (with the =auto-completion= layer)
- Source analysis using [[https://docs.google.com/document/d/1_Y9xCEMj5S-7rv2ooHpZNH15JgRT5iM742gJkw5LtmQ][go-guru]]
- Linting with flycheck's built-in checkers or flycheck-gometalinter
- Coverage profile visualization

* Install
** Pre-requisites
You will need =gocode= and =godef=:

#+BEGIN_SRC sh
  go get -u -v github.com/nsf/gocode
  go get -u -v github.com/rogpeppe/godef
  go get -u -v golang.org/x/tools/cmd/guru
  go get -u -v golang.org/x/tools/cmd/gorename
  go get -u -v github.com/golang/tools/cmd/goimports
#+END_SRC

If you wish to use =gometalinter= set the value of =go-use-gometalinter= to t:

#+begin_src emacs-lisp
  (go :variables go-use-gometalinter t)
#+end_src

and install the tool:

#+BEGIN_SRC sh
  go get -u -v github.com/alecthomas/gometalinter
  gometalinter --install --update
#+END_SRC

For more information read [[https://github.com/alecthomas/gometalinter/blob/master/README.md][gometalinter README.md]]
and [[https://github.com/favadi/flycheck-gometalinter/blob/master/README.md][flycheck-gometalinter README.md]]

Make sure that =gocode= executable is in your PATH. For information about
setting up =$PATH=, check out the corresponding section in the FAQ (~SPC h f
$PATH RET~).

For best results, make sure that the =auto-completion= and =syntax-checking=
layers are enabled as well.

** Layer
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =go= to the existing =dotspacemacs-configuration-layers= list in this
file.

* Configuration

By default, go buffers are run through =gofmt= on save. To use a different
formatter, set the value of =gofmt-command=, e.g.

#+begin_src emacs-lisp
  (setq gofmt-command "goimports")
#+end_src

or

#+begin_src emacs-lisp
  (go :variables gofmt-command "goimports")
#+end_src

** Indentation
By default, the tab width in Go mode is 8 spaces. To use a different value set
the layer variable =go-tab-width=, e.g.

#+begin_src emacs-lisp
  (go :variables go-tab-width 4)
#+end_src

** Tests
If you're using =gocheck= in your project you can use the
=go-use-gocheck-for-testing= variable to enable suite testing and to get single
function testing to work.

=go-coverage-display-buffer-func= controls how =go-coverage= should display
the coverage buffer. See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window.html][=display-buffer=]] for a list of possible functions.
The default value is =display-buffer-reuse-window=.

Tests are run in a compilation buffer displayed in a popup window that can be
closed by pressing ~C-g~ from any other window. The variable
=go-test-buffer-name= can be customized to set the output buffer name.

To provide additional arguments to go test, specify =go-use-test-args=.
#+begin_src emacs-lisp
  (go :variables go-use-test-args "-race -timeout 10s"
#+end_src

** Guru

Go Oracle has been deprecated as of October 1, 2016, it's replacement is =go-guru=.

If you would like to use the =goguru= bindings in your work, you will need to
install it, and in your project you will need to set the scope with ~SPC m f o~.
The scope is a comma separated set of packages, and =go='s recursive operator is
supported. In addition, you can prefix with =-= to exclude a package from
searching.

In addition, =GOPATH= must be set prior to =go-guru= initialization.

** Autocomplete
=gocode= uses the output from installed binary files to provide its suggestions.
You have a few options to ensure you always get up to date suggestions:

- Run =go install ./...= in your package directory when you make a file change.
- Run =gocode set autobuild true= to have gocode attempt to run =go install
  ./...= for you.
- You can configure your task runner to run =go install ./...= command on every
  file change.

* Working with Go
** Go commands (start with =m=):

| Key Binding | Description                                                                           |
|-------------+---------------------------------------------------------------------------------------|
| ~SPC m h h~ | godoc at point                                                                        |
| ~SPC m i g~ | goto imports                                                                          |
| ~SPC m i a~ | add import                                                                            |
| ~SPC m i r~ | remove unused import                                                                  |
| ~SPC m e b~ | go-play buffer                                                                        |
| ~SPC m e r~ | go-play region                                                                        |
| ~SPC m e d~ | download go-play snippet                                                              |
| ~SPC m x x~ | run "go run" for the current 'main' package                                           |
| ~SPC m g a~ | jump to matching test file or back from test to code file                             |
| ~SPC m g c~ | open a clone of the current buffer with a coverage info (=go tool cover -h= for help) |
| ~SPC m g g~ | go jump to definition                                                                 |
| ~SPC m r n~ | go rename                                                                             |
| ~SPC m t p~ | run "go test" for the current package                                                 |
| ~SPC m t P~ | run "go test" for the current package and all packages under it                       |
| ~SPC m t t~ | run "go test" for the function you're currently in (while you're in a _.test.go file) |
| ~SPC m t s~ | run "go test" for the suite you're currently in (requires gocheck)                    |

** Go Guru

| Key Binding | Description                                          |
|-------------+------------------------------------------------------|
| ~SPC m f d~ | go-guru describe symbol at point                     |
| ~SPC m f f~ | go-guru show free variables                          |
| ~SPC m f i~ | go-guru show implements relation                     |
| ~SPC m f c~ | go-guru show channel sends/receives                  |
| ~SPC m f r~ | go-guru show referrers                               |
| ~SPC m f j~ | go-guru jump to symbol definition                    |
| ~SPC m f p~ | go-guru show what the select expression points to    |
| ~SPC m f s~ | go-guru show callstack                               |
| ~SPC m f e~ | go-guru show possible contants/types for error value |
| ~SPC m f <~ | go-guru show possible callers                        |
| ~SPC m f >~ | go-guru show call targets                            |
| ~SPC m f o~ | go-guru set analysis scope                           |
