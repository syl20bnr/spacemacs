#+TITLE: Rust layer

[[file:img/rust.png]]

* Table of Contents                     :TOC_4_gh:noexport:
- [[#description][Description]]
  - [[#features][Features:]]
- [[#install][Install]]
  - [[#layer][Layer]]
  - [[#backends][Backends]]
    - [[#racer][Racer]]
    - [[#lsp][LSP]]
  - [[#cargo][Cargo]]
  - [[#rustfmt][Rustfmt]]
- [[#key-bindings][Key bindings]]

* Description
This layer supports [[https://www.rust-lang.org/en-US/][Rust]] development in Spacemacs.

** Features:
- Auto-completion and navigation support through [[https://github.com/emacs-lsp/lsp-rust][lsp]] or [[https://github.com/phildawes/racer][Racer]]
- support for the Rust package manager [[http://doc.crates.io/index.html][Cargo]]

* Install
** Layer
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =rust= to the existing =dotspacemacs-configuration-layers= list in this
file.

** Backends
The backend is dependent upon the =rust-backend= layer configuration variable.
The possible vaules for =rust-backend= are =lsp= or =racer= with =racer= being the default.

*** Racer
You must install [[https://github.com/phildawes/racer][Racer]] to use this backend. Make sure the =racer= binary is available in
your =PATH= and to set the environment variable =RUST_SRC_PATH=, as described in
the [[https://github.com/phildawes/racer#installation][installation instructions]].

To enable auto-completion, ensure that the =auto-completion= layer is enabled.

*** LSP
You must install the [[https://github.com/rust-lang-nursery/rls][Rust Language Server]].

Configuration of the lsp backend is done through the layer configuration variable =rust-rls-cmd=.
The =rust-rls-cmd= is how the rust server should be launched.
=rust-rls-cmd= defaults to =rustup run nightly rls=.
The environment variable =RLS_ROOT= is used for configuration if =rust-rls-cmd= is set to =nil=.
For additional configuration please see [[https://github.com/emacs-lsp/lsp-rust][rust-lsp]].

To enable auto-completion, ensure that the =auto-completion= layer is enabled.

** Cargo
[[http://doc.crates.io/index.html][Cargo]] is a project management command line tool for Rust. Installation
instructions can be found on the main page of [[http://doc.crates.io/index.html][Cargo]].

** Rustfmt
Format Rust code according to style guidelines using [[https://github.com/rust-lang-nursery/rustfmt][rustfmt]].

#+BEGIN_SRC sh
  cargo install rustfmt
#+END_SRC

To enable automatic buffer formatting on save, set the variable =rust-format-on-save= to =t=.

* Key bindings

| Key Binding | Description                                 |
|-------------+---------------------------------------------|
| ~SPC m = =~ | reformat the buffer                         |
| ~SPC m c .~ | repeat the last Cargo command               |
| ~SPC m c C~ | remove build artifacts with Cargo           |
| ~SPC m c X~ | execute a project example with Cargo        |
| ~SPC m c c~ | compile project with Cargo                  |
| ~SPC m c d~ | generate documentation with Cargo           |
| ~SPC m c e~ | run benchmarks with Cargo                   |
| ~SPC m c f~ | format all project files with rustfmt       |
| ~SPC m c i~ | create a new project with Cargo (init)      |
| ~SPC m c l~ | run linter ([[https://github.com/arcnmx/cargo-clippy][cargo-clippy]]) with Cargo        |
| ~SPC m c n~ | create a new project with Cargo (new)       |
| ~SPC m c o~ | run all tests in current file with Cargo    |
| ~SPC m c s~ | search for packages on crates.io with Cargo |
| ~SPC m c t~ | run the current test with Cargo             |
| ~SPC m c u~ | update dependencies with Cargo              |
| ~SPC m c x~ | execute a project with Cargo                |
| ~SPC m c v~ | check (verify) a project with Cargo         |
| ~SPC m g g~ | jump to definition                          |
| ~SPC m h h~ | describe symbol at point                    |
| ~SPC m t~   | run tests with Cargo                        |
