#+TITLE: Rust layer

#+TAGS: general|layer|multi-paradigm|programming

[[file:img/rust.png]]

* Table of Contents                     :TOC_5_gh:noexport:
- [[#description][Description]]
  - [[#features][Features:]]
- [[#install][Install]]
  - [[#layer][Layer]]
  - [[#lsp][LSP]]
    - [[#autocompletion][Autocompletion]]
    - [[#debugger-dap-integration][Debugger (dap integration)]]
    - [[#automatically-reload-workspace][Automatically Reload Workspace]]
  - [[#cargo][Cargo]]
    - [[#cargo-edit][cargo-edit]]
    - [[#cargo-outdated][cargo-outdated]]
  - [[#rustfmt][Rustfmt]]
  - [[#clippy][Clippy]]
- [[#key-bindings][Key bindings]]
  - [[#debugger][Debugger]]

* Description
This layer supports [[https://www.rust-lang.org][Rust]] development in Spacemacs.

** Features:
- Auto-completion and navigation support through [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]
- Interactive debugger using [[https://github.com/emacs-lsp/dap-mode][dap-mode]]
- Support for the Rust package manager [[http://doc.crates.io/index.html][Cargo]]
- Support for [[https://github.com/nabero/ron-mode][Rusty Object Notation (RON)]]

* Install
** Layer
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =rust= to the existing =dotspacemacs-configuration-layers= list in this
file.

** LSP
The =lsp= backend will be automatically enabled if the layer =lsp= is used.

*** Autocompletion
To enable auto-completion, ensure that the =auto-completion= layer is enabled.

*** Debugger (dap integration)
To install the debug adapter you may run =M-x dap-gdb-lldb-setup= when you are on Linux or download it manually from [[https://marketplace.visualstudio.com/items?itemName=webfreak.debug][Native Debug]] and adjust =dap-gdb-lldb-path=.

*** Automatically Reload Workspace
When the LSP server is =rust-analyzer=, it may needs to reload the workspace to pickup changes made in =Cargo.toml=.
You can call =spacemacs/lsp-rust-analyzer-reload-workspace=, which would be faster than restarting the LSP backend.

You can also set =cargo-process-reload-on-modify= to =t=, then it will automatically reload the workspace after
one of the following is run:
- =rustic-cargo-add=
- =rustic-cargo-rm=
- =rustic-cargo-upgrade=

#+BEGIN_SRC elisp
  (setq-default dotspacemacs-configuration-layers
                 '(lsp :variables cargo-process-reload-on-modify t))
#+END_SRC

** Cargo
[[http://doc.crates.io/index.html][Cargo]] is a project management command line tool for Rust. Installation
instructions can be found on the main page of [[http://doc.crates.io/index.html][Cargo]].

*** cargo-edit
[[https://github.com/killercup/cargo-edit][cargo-edit]] allows you to add, remove, and upgrade dependencies by modifying your =Cargo.toml= file.

#+BEGIN_SRC sh
  cargo install cargo-edit
#+END_SRC

*** cargo-outdated
[[https://github.com/kbknapp/cargo-outdated][cargo-outdated]] displays dependencies that have new version available.

#+BEGIN_SRC sh
  cargo install cargo-outdated
#+END_SRC

** Rustfmt
Format Rust code according to style guidelines using [[https://github.com/rust-lang-nursery/rustfmt][rustfmt]].

#+BEGIN_SRC sh
  rustup component add rustfmt
#+END_SRC

To enable automatic buffer formatting on save, set the variable =rustic-format-on-save= to =t=.

** Clippy
[[https://github.com/rust-lang/rust-clippy][Clippy]] provides a collection of lints to to catch common mistakes and improve your code.

#+BEGIN_SRC sh
  rustup component add clippy
#+END_SRC

* Key bindings

| Key binding | Description                                            |
|-------------+--------------------------------------------------------|
| ~SPC m = =~ | reformat the buffer                                    |
| ~SPC m b R~ | reload Rust-Analyzer workspace                         |
| ~SPC m c .~ | repeat the last Cargo command                          |
| ~SPC m c =~ | format all project files with rustfmt                  |
| ~SPC m c a~ | add a new dependency with cargo-edit                   |
| ~SPC m c c~ | compile project                                        |
| ~SPC m c C~ | remove build artifacts                                 |
| ~SPC m c d~ | generate documentation and open it in default browser  |
| ~SPC m c s~ | search the documentation                               |
| ~SPC m c e~ | run benchmarks                                         |
| ~SPC m c i~ | initialise a new project with Cargo (init)             |
| ~SPC m c l~ | run linter ([[https://github.com/arcnmx/cargo-clippy][cargo-clippy]])                              |
| ~SPC m c f~ | run linter automatic fixes ([[https://github.com/arcnmx/cargo-clippy][cargo-clippy]])              |
| ~SPC m c n~ | create a new project with Cargo (new)                  |
| ~SPC m c o~ | display outdated dependencies ([[https://github.com/kbknapp/cargo-outdated][cargo-outdated]])         |
| ~SPC m c r~ | remove a dependency with cargo-edit                    |
| ~SPC m c u~ | update dependencies with Cargo                         |
| ~SPC m c U~ | upgrade dependencies to LATEST version with cargo-edit |
| ~SPC m c v~ | check (verify) a project with Cargo                    |
| ~SPC m c x~ | execute the default binary                             |
| ~SPC m g g~ | jump to definition                                     |
| ~SPC m h h~ | describe symbol at point                               |
| ~SPC m s s~ | switch to other LSP server backend                     |
| ~SPC m t a~ | test current project                                   |
| ~SPC m t t~ | run the current test                                   |

** Debugger
Using the =dap= layer you'll get access to all the DAP key bindings, see the
complete list of key bindings on the [[https://github.com/syl20bnr/spacemacs/tree/develop/layers/%2Btools/dap#key-bindings][dap layer description]].
