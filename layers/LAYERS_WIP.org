#+TITLE: Configuration layers

* Table of Contents                     :TOC_4_gh:noexport:
- [[#chats][Chats]]
  - [[#erc-layer][ERC layer]]
  - [[#jabber-layer][Jabber layer]]
  - [[#rcirc-layer][RCIRC layer]]
  - [[#slack-layer][Slack layer]]
- [[#checkers][Checkers]]
  - [[#syntax-checking-layer][Syntax Checking layer]]
  - [[#spell-checking-layer][Spell Checking layer]]
- [[#completion][Completion]]
  - [[#templates-layer][Templates layer]]
  - [[#helm-layer][Helm layer]]
  - [[#auto-completion-layer][Auto-completion layer]]
  - [[#ivy-layer][Ivy layer]]
- [[#e-mail][E-mail]]
  - [[#mu4e-layer][Mu4e layer]]
  - [[#notmuch-layer][Notmuch layer]]
  - [[#gnus-layer][Gnus layer]]
- [[#file-trees][File trees]]
  - [[#treemacs-layer][Treemacs layer]]
  - [[#neotree-layer][Neotree layer]]
- [[#fonts][Fonts]]
  - [[#unicode-fonts-layer][unicode-fonts layer]]
- [[#emacs][Emacs]]
  - [[#smex-layer][Smex layer]]
  - [[#org-layer][Org layer]]
  - [[#semantic-layer][Semantic layer]]
  - [[#better-defaults-layer][Better Defaults layer]]
  - [[#typography-layer][Typography layer]]
  - [[#ibuffer-layer][IBuffer layer]]
- [[#frameworks][Frameworks]]
  - [[#django-layer][Django layer]]
  - [[#react-layer][React layer]]
  - [[#emberjs-layer][emberjs layer]]
  - [[#ruby-on-rails-layer][Ruby on Rails layer]]
  - [[#phoenix-layer][phoenix layer]]
- [[#fun][Fun]]
  - [[#selectric-layer][selectric layer]]
  - [[#games-layer][Games layer]]
  - [[#emoji-layer][Emoji layer]]
  - [[#xkcd-layer][xkcd layer]]
- [[#internationalization][internationalization]]
  - [[#japanese-layer][Japanese layer]]
  - [[#chinese-layer][Chinese layer]]
  - [[#keyboard-layout-layer][keyboard-layout layer]]
- [[#miscellaneous][Miscellaneous]]
  - [[#multiple-cursors-layer][multiple-cursors layer]]
  - [[#parinfer-layer][Parinfer layer]]
  - [[#nlinum-layer][nlinum layer]]
  - [[#copy-as-format-layer][copy-as-format layer]]
  - [[#ietf-layer][ietf layer]]
- [[#music][Music]]
  - [[#spotify-layer][Spotify layer]]
- [[#operating-systems][Operating systems]]
  - [[#nixos-layer][NixOS layer]]
  - [[#osx-layer][OSX layer]]
- [[#pair-programming][Pair programming]]
  - [[#floobits-layer][Floobits layer]]
- [[#readers][Readers]]
  - [[#pdf-layer][PDF layer]]
  - [[#epub-layer][epub layer]]
  - [[#dash-layer][Dash layer]]
  - [[#deft-layer][Deft layer]]
  - [[#elfeed-layer][Elfeed layer]]
  - [[#speed-reading-layer][Speed Reading layer]]
- [[#programming-languages][Programming languages]]
  - [[#general-purpose][General-purpose]]
    - [[#imperative][Imperative]]
      - [[#forth-layer][Forth layer]]
      - [[#asm-layer][asm layer]]
- [[#source-control][Source control]]
  - [[#version-control-layer][Version-Control layer]]
  - [[#github-layer][GitHub layer]]
  - [[#perforce-layer][Perforce layer]]
  - [[#git-layer][Git layer]]
- [[#spacemacs][Spacemacs]]
  - [[#distributions][Distributions]]
    - [[#spacemacs-docker-distribution][spacemacs-docker distribution]]
  - [[#utilities][Utilities]]
    - [[#spacemacs-purpose-layer][Spacemacs-purpose layer]]
- [[#tagging][Tagging]]
  - [[#helm-gtags-layer][Helm Gtags layer]]
  - [[#cscope-layer][Cscope layer]]
- [[#themes][Themes]]
  - [[#themes-megapack-layer][Themes Megapack layer]]
  - [[#colors-layer][Colors layer]]
  - [[#theming-layer][Theming layer]]
- [[#tools][Tools]]
  - [[#cfengine-layer][CFEngine layer]]
  - [[#node-layer][Node layer]]
  - [[#ansible-layer][Ansible layer]]
  - [[#lsp-layer][LSP layer]]
  - [[#command-log-layer][command-log layer]]
  - [[#restclient-layer][Restclient layer]]
  - [[#import-js-layer][import-js layer]]
  - [[#systemd-layer][systemd layer]]
  - [[#saltstack-layer][Saltstack layer]]
  - [[#ranger-layer][Ranger layer]]
  - [[#rebox-layer][Rebox layer]]
  - [[#dap-layer][DAP layer]]
  - [[#bm-layer][bm layer]]
  - [[#terraform-layer][Terraform layer]]
  - [[#transmission-layer][Transmission layer]]
  - [[#docker-layer][Docker layer]]
  - [[#vagrant-layer][Vagrant layer]]
  - [[#ycmd-layer][YCMD layer]]
  - [[#sphinx-layer][Sphinx layer]]
  - [[#xclipboard-layer][xclipboard layer]]
  - [[#shell-layer][Shell layer]]
  - [[#tern-layer][Tern layer]]
  - [[#fasd-layer][fasd layer]]
  - [[#finance-layer][Finance layer]]
  - [[#tmux-layer][Tmux layer]]
  - [[#chrome-layer][Chrome layer]]
  - [[#web-beautify-layer][web-beautify layer]]
  - [[#nginx-layer][nginx layer]]
  - [[#pass-layer][Pass layer]]
  - [[#geolocation-layer][Geolocation layer]]
  - [[#prodigy-layer][Prodigy layer]]
  - [[#cmake-layer][CMake layer]]
  - [[#imenu-list-layer][imenu-list layer]]
  - [[#debug-layer][debug layer]]
  - [[#prettier-layer][prettier layer]]
  - [[#pandoc-layer][Pandoc layer]]
  - [[#puppet-layer][Puppet layer]]
- [[#vim][Vim]]
  - [[#evil-snipe-layer][Evil-snipe layer]]
  - [[#vim-empty-lines-layer][Vim-empty-lines layer]]
  - [[#evil-commentary-layer][Evil-commentary layer]]
  - [[#vinegar-layer][Vinegar layer]]
- [[#web-services][Web services]]
  - [[#evernote-layer][Evernote layer]]
  - [[#twitter-layer][Twitter layer]]
  - [[#wakatime-layer][Wakatime layer]]
  - [[#confluence-layer][Confluence layer]]
  - [[#search-engine-layer][Search Engine layer]]

* Chats
** ERC layer
[[file:+chat/erc/README.org][link]]
Layer for [[http://www.emacswiki.org/emacs/ERC][ERC IRC chat]].

Features:
- Highlight nicks (using [[https://github.com/leathekd/erc-hl-nicks][erc-hl-nicks]])
- Image inline support (using [[https://github.com/kidd/erc-image.el][erc-image]])
- Logging to =~/.emacs.d/.cache/erc-logs= and =ViewLogMode= for viewing logs
  (using [[https://github.com/Niluge-KiWi/erc-view-log][erc-view-log]])
- YouTube videos Thumbnails inline (using [[https://github.com/yhvh/erc-yt][erc-yt]])
- Social Graph for ERC messages (using [[https://github.com/vibhavp/erc-social-graph][erc-social-graph]])
- Optional SASL authentication via the variable =erc-enable-sasl-auth=
  (using [[http://emacswiki.org/emacs/ErcSASL][erc-sasl]])
- D-BUS notifications via the variable =erc-enable-notifications=
- Completion of Emojis using [[https://github.com/dunn/company-emoji][company-emoji]] (still needs a way of showing, either
  using the =emoji= layer or having a proper font) :clap:

** Jabber layer
[[file:+chat/jabber/README.org][link]]
This layer adds support for the Jabber (XMPP) client for Emacs

Features:
- Use Jabber without having to leave Spacemacs

** RCIRC layer
[[file:+chat/rcirc/README.org][link]]
This layer provide support for [[http://www.gnu.org/software/emacs/manual/html_mono/rcirc.html][rcirc]] with optional support for authinfo
and ZNC.

Features:
- Store channel logs into =~/.emacs.d/.cache/rcirc-logs/<channel>=
- Support for credentials stored in =~/.authinfo.gpg= (need to have gnutls)
- Support ZNC support (with optional =~/.authinfo.gpg=)
- Colored nicknames
- Real-time change when people use =s/foo/bar/= in chat
- Completion of Emojis using [[https://github.com/dunn/company-emoji][company-emoji]] (still needs a way of showing, either
  using the =emoji= layer or having a proper font) :clap:

** Slack layer
[[file:+chat/slack/README.org][link]]
This layer provides an interface to the Slack chat service via the emacs-slack
package. Where possible, this layer aims to reuse key bindings from the IRC
packages in Spacemacs.

Features:
- Real time messaging with [[https://github.com/ahyatt/emacs-websocket][emacs-websocket]]
- Connect to multiple slack instances
- Notifications with [[https://github.com/jwiegley/alert][alert.el]]

* Checkers
** Syntax Checking layer
[[file:+checkers/syntax-checking/README.org][link]]
This layer adds on the fly syntax checking to all supported language layers.

Features:
- Support for automatic syntax checking with [[http://www.flycheck.org/][Flycheck]] for various language layers
- Tooltip syntax errors with =popwin=

** Spell Checking layer
[[file:+checkers/spell-checking/README.org][link]]
This layer provides spell checking capabilities to Spacemacs.

Features:
- Buffer-wide spell checking via external command (ispell, hunspell, aspell) run through [[http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][Flyspell]].
- Spell as you type
- Optional correction popups, controlled by =enable-flyspell-auto-completion= variable.
- [[https://github.com/nschum/auto-dictionary-mode][Auto dictionary mode]] for some languages.

* Completion
** Templates layer
[[file:+completion/templates/README.org][link]]
This layer provides templates to Spacemacs. A template consists of text that is
automatically inserted into a new file when it is opened. This is done via
[[https://github.com/mineo/yatemplate][yatemplate]], which leverages [[https://github.com/joaotavora/yasnippet][yasnippet]].

Features:
- Auto-insert snippets when creating specific new files.

** Helm layer
[[file:+completion/helm/README.org][link]]
This layer enables Helm everywhere in Spacemacs. The alternative to this
layer is the Ivy layer which brings the same level of integration as Helm.

These completion systems are the central control towers of Spacemacs, they are
used to manage buffers, projects, search results, configuration layers, toggles
and more...

Mastering your choice of completion system will make you a Spacemacs power user.

Features:
- Project wide =grep= like text search via =helm-dir-smart-do-search=
- Project wide text replacements using =helm-edit-mode=
- Buffer wide dynamic text search via =helm-swoop=
- Fuzzy matching for most =helm-sources=
- Detailed configuration parameters for helms appearance
- Intuitive =transient state=

** Auto-completion layer
[[file:+completion/auto-completion/README.org][link]]
This layer adds auto-completion to all supported language layers.

Features:
- Support for code completion with [[http://company-mode.github.io/][company]] or [[https://github.com/auto-complete/auto-complete][auto-complete]] for various language layers
- Frequency-based suggestions via [[https://github.com/company-mode/company-statistics][company-statistics]] for =company=
- Integration with [[https://github.com/capitaomorte/yasnippet][yasnippet]] and [[https://github.com/abo-abo/auto-yasnippet][auto-yasnippet]]
- Automatic configuration of [[https://www.emacswiki.org/emacs/HippieExpand][hippie-expand]]

** Ivy layer
[[file:+completion/ivy/README.org][link]]
This layer enables Ivy for completion. It will replace the default completion by
[[https://github.com/emacs-helm/helm][Helm]].

These completion systems are the central control towers of Spacemacs, they are
used to manage buffers, projects, search results, configuration layers, toggles
and more...

Mastering your choice of completion system will make you a Spacemacs power user.

Features:
- Project wide =grep= like text search via =search-auto=
- Project wide text replacements using =counsel-imenu=
- Buffer wide dynamic text search via =swiper=
- Detailed configuration parameters for ivy appearance
- Intuitive =transient state=
- Advanced buffer information with =ivy-rich=

* E-mail
** Mu4e layer
[[file:+email/mu4e/README.org][link]]
This layer adds support for the Mu4e email client.

Features:
- Search, read, reply, move, and delete email.
- Search-based: no folders, only queries.
- UI optimized for speed: quick keystrokes for common actions.
- Very extendable and costumizable.
- Integration with Helm.
- Maildir summary using [[https://github.com/agpchil/mu4e-maildirs-extension][mu4e-mailidrs-extension]]
- Notifications using [[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]]

** Notmuch layer
[[file:+email/notmuch/README.org][link]]
Notmuch offers a fast, global-search and tag-based email system to
use within your text editor or in a terminal.

This layer integrates notmuch emacs package into spacemacs.

Features:
- Email searching
- Email tagging

** Gnus layer
[[file:+email/gnus/README.org][link]]
This layer integrates a general purpose email/newsgroup client into Spacemacs.

Features:
- Support for reading RSS feeds, newsgroups and mails directly within emacs via [[http://www.gnus.org/][Gnus]].
- Support for beautiful HTML mails generated from any =org= buffer.
- Support for credential managment via [[https://gnupg.org/][GnuPG]].

* File trees
** Treemacs layer
[[file:+filetree/treemacs/README.org][link]]
This layer sets up a file navigation and project explorer side-window via [[https://github.com/Alexander-Miller/treemacs][Treemacs]].

Features:

An detailed overview over Treemacs’ available features is available in [[https://github.com/Alexander-Miller/treemacs#detailed-feature-list][its
readme]]. In a short summary Treemacs offers the following:
- Simple and powerful navigation and ability to detail exactly how and where a
  file should be opened
- Good looking png icons.
- Display of multiple file trees organized as projects residing in a workspace.
- Ability to show tags contained in files. Tags are provided by imenu, so
  nearly every filetype is supported.
- Mouse interface for single and double left clicks in line with modern GUI standards.
  (Clicking on an icon will also display a file’s tags)
- Locational awareness: commands like ~find-file~ or ~magit-status~ will use the location
  of the node at point (with $HOME as fallback)
- Optionally fontifying files based on their git status.
- Optionally collapsing single-dir-child directories into one.
- Doing both asynchronously for an imperceptible performance cost.
- Optional =follow-mode= to automatically focus the currently selected file.
- Optional =filewatch-mode= to automatically refresh the view after (and only
  after) changes to the shown filesystem.

** Neotree layer
[[file:+filetree/neotree/README.org][link]]
This layer setups a file tree navigator buffer using Neotree (replacing the Treemacs layer).

Features:
- intuitive evil key bindings integration
- supports multiple themes
- transient state by pressing on ~?~
- version-control integration

* Fonts
** unicode-fonts layer
[[file:+fonts/unicode-fonts/README.org][link]]
This layer adds support for the [[https://github.com/rolandwalker/unicode-fonts][unicode-fonts]] package. It is recommended to
install the fonts listed in the [[https://github.com/rolandwalker/unicode-fonts#quickstart][Quickstart]] section of the unicode-fonts README.

Features:
- Display unicode glyphs using the best available font.
- Easily override glyphs or sections of glyphs.
- Display color emoji on both the Mac port version of Emacs and emacs-plus (with
  =unicode-fonts-force-multi-color-on-mac= set to non nil).

* Emacs
** Smex layer
[[file:+emacs/smex/README.org][link]]
This layer provides a more traditional alternative to =helm-M-x= based on =ido=.

Features:
- Provides an alternative way for =helm-M-x= based on =ido= and [[https://github.com/nonsequitur/smex][smex]]

** Org layer
[[file:+emacs/org/README.org][link]]
This layer enables [[http://orgmode.org/][org mode]] for Spacemacs.

Features:
- Vim inspired key bindings are provided by [[https://github.com/Somelauw/evil-org-mode][evil-org-mode]]
- Nicer bullet via [[https://github.com/sabof/org-bullets][org-bullets]]
- A [[https://cirillocompany.de/pages/pomodoro-technique][pomodoro method]] integration via [[https://github.com/lolownia/org-pomodoro][org-pomodoro]]
- Presentation mode via [[https://github.com/rlister/org-present][org-present]]
- Insertion of images via [[https://github.com/abo-abo/org-download][org-download]]
- Project-specific TODOs via [[https://github.com/IvanMalison/org-projectile][org-projectile]]

** Semantic layer
[[file:+emacs/semantic/README.org][link]]
CEDET is a *C*ollection of *E*macs *D*evelopment *E*nvironment *T*ools written
with the end goal of creating an advanced development environment in Emacs.
CEDET includes common features such as intelligent completion, source code
navigation, project management, code generation with templates. CEDET also
provides a framework for working with programming languages; support for new
programming languages can be added and use CEDET to provide IDE-like features.
This framework is called Semantic.

Semantic is a package that provides a framework for writing parsers. Parsing is
a process of analyzing source code based on programming language syntax. The
packages relies on Semantic for analyzing source code and uses its results to
perform smart code refactoring that based on code structure of the analyzed
language, instead of plain text structure. Semantic is the core of CEDET.

Features:
- Display function or variable definition at the bottom.
- Display current function cursor is in at the top. See
  [[https://github.com/tuhdo/semantic-stickyfunc-enhance][this page]] for demos in some programming languages.
- Support common C/C++ refactoring with [[https://github.com/tuhdo/semantic-refactor][semantic-refactor]]. See
  [[https://github.com/tuhdo/semantic-refactor/blob/master/srefactor-demos/demos.org][this page]] for demonstration of refactoring features.
- Support Lisp source code formatting with [[https://github.com/tuhdo/semantic-refactor][semantic-refactor]]. See
  [[https://github.com/tuhdo/semantic-refactor/blob/master/srefactor-demos/demos-elisp.org][this page]] for demonstration of Lisp formatting features.

** Better Defaults layer
[[file:+emacs/better-defaults/README.org][link]]
This layer enhances the default commands of Emacs and is primarily intended to
be used with the =emacs= editing style as it does not change anything in the Vim
key bindings.

However the =emacs= editing style is not required, you can still use this layer
while you are using the =vim= editing style if you have some kind of mixed
style.

The commands defined in this layer are taken from various sources like [[https://github.com/bbatsov/prelude][Prelude]].

Features:
- Smart line navigation: Subsequent presses of ~C-a~ toggles between the beginning of the line and the first non-whitespace character. Similarly, subsequent presses of ~C-e~ will toggle between the end of the code and the end of the comments.
- =spacemacs/backward-kill-word-or-region=: A combination of =kill-region= and =backward-kill-word=, depending on whether there is an active region. If there’s an active region kill that. If not kill the preceding word.
- Fill or unfill paragraph: Pressing ~M-q~ for the first time fills current paragraph and pressing ~M-q~ for the second time unfills it. Note that some modes override this key binding so it’s not available everywhere. Due to implementation details unfilling doesn’t work when called twice via ~M-x~.

** Typography layer
[[file:+emacs/typography/README.org][link]]
This layer provides support for typographic text editing in Spacemacs.

Features:
- Modes to automatically insert and cycle among typographic characters
- [[https://github.com/jorgenschaefer/typoel][Typo Mode]] automatically inserts and cycles among typographic Unicode
  characters on some keys.
- Tildify Mode automatically inserts non-breaking spaces where
  required (Only available on Emacs 25).

** IBuffer layer
[[file:+emacs/ibuffer/README.org][link]]
This layer configures Emacs IBuffer for Spacemacs.

Features:
- Grouping of buffers by major-modes
- Grouping of buffers by projects

* Frameworks
** Django layer
[[file:+frameworks/django/README.org][link]]
This layer adds support for the Python web framework [[https://www.djangoproject.com/][Django]] to Spacemacs.

Features:
- Test execution directly from emacs
- Starting/stopping of the Django test server
- Starting of an interactive Python shell in the current project for debugging
- Fixed commands to open various Django specific settings files
- Automatic deployment with [[http://www.fabfile.org][Fabric]] directly from emacs
- Control of [[http://south.aeracode.org/][South]] database migration tool

** React layer
[[file:+frameworks/react/README.org][link]]
ES6 and JSX ready configuration layer for React
It will automatically recognize =.jsx= files and files with =react= imported.

Features:
- on-the-fly syntax checking
- proper syntax highlight and indentation with jsx
- backend support for autocompletion as in rjsx-mode
- jsfmt automatic formatting
- js2-refactor
- js-doc

** emberjs layer
[[file:+frameworks/emberjs/README.org][link]]
This enables helpers for working with Ember.js projects.

This also includes [[https://github.com/ronco/ember-yasnippets.el][ember-yasnippets]]. See the README for ember-yansippets for the snippet keys.

To use this, you need to add add a =.dir-locals.el= file with the following in the root of your ember project:

#+BEGIN_SRC emacs-lisp
  ((nil . ((mode . ember))))
#+END_SRC

If you do not wish to do the following, you may also just do =M-x ember-mode=, however it will make things easier.

Additionally, temporary backup, autosave, and lockfiles interfere with broccoli watcher, so they need to either be moved out of the way or disabled.

Add the following to your =dotspacemacs/user-config=:

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
  (setq create-lockfiles nil)
#+END_SRC

Features:
- Ability to easily switch between various files
- Key bindings for generators and also easily revert generator actions
- Ability to build, start server, and run tests

** Ruby on Rails layer
[[file:+frameworks/ruby-on-rails/README.org][link]]
This layer aims at providing support for the Ruby on Rails framework.

Features:
- Quick file navigation with with [[https://github.com/asok/projectile-rails][projectile-rails]]
- Run server
- Run generators
- Rake runner
- Interactive Rails console

** phoenix layer
[[file:+frameworks/phoenix/README.org][link]]
This layer adds key bindings for [[https://github.com/tonini/alchemist.el][Alchemist]]’s already built in phoenix mode.

Features:
- Key bindings for navigation to files

* Fun
** selectric layer
[[file:+fun/selectric/README.org][link]]
This layer makes your Emacs sound like an IBM Selectric typewriter, for those
moments when your loud, clicky mechanical keyboard is not at hand, yet, you’d
still wish to enjoy the sound.

Features:
- Brings back fond memories about your first programming job where you started
  with that big mechanical keyboard and the small monochrom display working on
  the latest IBM Iseries server.

** Games layer
[[file:+fun/games/README.org][link]]
This layer allows you to play evilified games in spacemacs.

Features:
- 2048-game
- Pacmacs (Pacman for Emacs)
- Sudoku
- Tetris
- Typit

** Emoji layer
[[file:+fun/emoji/README.org][link]]
This layer adds support for Emoji emoticons from [[https://www.webpagefx.com/tools/emoji-cheat-sheet/][emoji-cheat-sheet]].

Features:
- Browse Emoji in a dedicated buffer
- Display Emoji images in buffer
- Insert one or several Emoji with an helm front-end
- Completion of Emojis using [[https://github.com/dunn/company-emoji][company-emoji]]

** xkcd layer
[[file:+fun/xkcd/README.org][link]]
This layer adds a [[http://xkcd.com/][xkcd]] navigation mode using [[https://github.com/vibhavp/emacs-xkcd][emacs-xkcd]].

Features:
- Load a random xkcd
- Show the text in the modeline
- Open explanation and current comic in browser
- Cache the comics in =.cache/xkcd=

* internationalization
** Japanese layer
[[file:+intl/japanese/README.org][link]]
This Layer adds Japanese related packages.

Features:
- [[https://github.com/kenjimyzk/evil-tutor-ja][evil-tutor-ja]]: Japanese Vimtutor adapted to Emacs+Evil and wrapped in a major mode
- [[https://github.com/emacs-jp/migemo][migemo]]: Japanese incremental search through dynamic pattern expansion
- [[https://github.com/emacs-helm/helm/wiki/Migemo][helm-migemo-mode]]: helm with migemo
- [[https://github.com/momomo5717/avy-migemo/blob/master/README.jp.org][avy-migemo]]: avy with migemo
- [[https://github.com/hsaito/ddskk][ddskk]]: Simple Kana to Kanji conversion program (SKK)
- [[https://github.com/emacs-jp/japanese-holidays][japanese-holidays]]: calendar functions for the Japanese calendar
- [[https://github.com/coldnew/pangu-spacing][pangu-spacing]]: emacs minor-mode to add space between Japanese and English
  characters.
- Join consecutive Japanese lines into a single long line without unwanted space
  when exporting org-mode to html.

** Chinese layer
[[file:+intl/chinese/README.org][link]]
This layer adds support for traditional Chinese script to Spacemacs.

Features:
- Support for the [[https://en.wikipedia.org/wiki/Pinyin][Pinyin(拼音)]] input method via [[https://github.com/tumashu/chinese-pyim][chinese-pyim]].
- Support for the [[https://en.wikipedia.org/wiki/Wubi_method][Wubi(五笔)]] input method via [[https://github.com/andyque/chinese-wbim][chinese-wbim]].
- Integration of the native input method framework [[https://en.wikipedia.org/wiki/Fcitx][fcitx]] via [[https://github.com/cute-jumper/fcitx.el][cute-jumper/fcitx.el]].
- Integration of the [[https://en.wikipedia.org/wiki/Youdao][Youdao(有道) Dictionary]] via [[https://github.com/xuchunyang/youdao-dictionary.el][youdao-dictionary]].
- Support for file searches in =dired= using Chinese Pinyin characters via [[https://github.com/redguardtoo/find-by-pinyin-dired][find-by-pinyin-dired]].
- Support for jumping to Chinese Pinyin characters with =ace-jump-mode= via [[https://github.com/cute-jumper/ace-pinyin][ace-pinyin]].
- Support for conversion between simplified and traditional Chinese texts via [[https://github.com/gucong/emacs-chinese-conv/][chinese-conv]].
- Automatic visual separation of Chinese and Latin characters via [[https://github.com/coldnew/pangu-spacing][coldnew/pangu-spacing]].
- Automatic joining of consecutive Chinese lines into a single long line without unwanted space when exporting org-mode to html.

** keyboard-layout layer
[[file:+intl/keyboard-layout/README.org][link]]
This layer configures some key bindings in Spacemacs, to make it compatible with
keyboard layouts that differs from the traditional =en-us= =QWERTY= layout.

Features:
- Support alernative keyboard layouts within spacemacs
- Remap navigation commands to the homerow of your chosen layout
- Remap missing commands automatically to elsewhere in the layout

* Miscellaneous
** multiple-cursors layer
[[file:+misc/multiple-cursors/README.org][link]]
Features:
- support for multiple cursors.

** Parinfer layer
[[file:+misc/parinfer/README.org][link]]
This layer provides an implementation of [[https://shaunlebron.github.io/parinfer/][parinfer]], a lisp editing paradigm that
controls indentation based on parentheses or vice versa.

Features:
- Automatic managment of parenthesis in clojure, emacs lisp, common-lisp and scheme following the parinfer editing paradigm.

** nlinum layer
[[file:+misc/nlinum/README.org][link]]
This layer provides various styles of line numbering in Spacemacs. It replaces
=linum= and =linum-relative= with the improved =nlinum= and =nlinum-relative=
packages.

Please note that on Emacs 26 and newer, this layer also replaces the new native
line numbers mode (=display-line-numbers-mode=), and because of that it is not
recommended to use =nlinum= layer on Emacs 26 or newer.

Features:
- Support for classic ascending line numbering.
- Support for line numbering relative to the current cursor position.

** copy-as-format layer
[[file:+misc/copy-as-format/README.org][link]]
This layer adds support for [[https://github.com/sshaw/copy-as-format][copy-as-format]].

Features:
- Function to copy buffer locations as GitHub/Slack/JIRA/HipChat/... formatted code

** ietf layer
[[file:+misc/ietf/README.org][link]]
The =IETF= layer collects various useful packages for participating in the
Internet Engineering Task Force ([[https://www.ietf.org]]).

Features:
- Fetching and opening IETF documents.
- Viewing IETF documents.
- Writing IETF documents.

* Music
** Spotify layer
[[file:+music/spotify/README.org][link]]
This layer integrates an online music service into Spacemacs.

Features:
- Support for listening to music from within Emacs via [[https://www.spotify.com][Spotify]].

* Operating systems
** NixOS layer
[[file:+os/nixos/README.org][link]]
This layer adds tools for better integration of emacs in NixOS.

Features:
- Nix-mode using [[https://github.com/NixOS/nix-mode][nix-mode]]
- Auto-completion of NixOS Options using [[https://github.com/travisbhartwell/nix-emacs/blob/master/company-nixos-options.el][company-nixos-options]]
- Helm Lookup for NixOS Options [[https://github.com/travisbhartwell/nix-emacs/blob/master/helm-nixos-options.el][helm-nixos-options]]

** OSX layer
[[file:+os/osx/README.org][link]]
Spacemacs is not just emacs+vim. It can have OSX key bindings too! This layer
globally defines common OSX key bindings.

Features:
- ~⌘~ is set to ~hyper~ and ~⌥~ is set to ~meta~
- In =dired= use =gls= instead of =ls=
- Fix separator colors of Spaceline mode-line

* Pair programming
** Floobits layer
[[file:+pair-programming/floobits/README.org][link]]
This layer adds support for the peer programming tool [[https://github.com/Floobits/floobits-emacs][floobits]] to Spacemacs.

Features:
- Loading of floobits configuration files with fixed commands
- Creation of floobits workspaces and populating it with content
- Marking of the current cursor position for all users within the current workspace
- Follow recent changes by other users

* Readers
** PDF layer
[[file:+readers/pdf/README.org][link]]
This layer enables support for PDF with the [[https://github.com/politza/pdf-tools][pdf-tools]] package.

According to the official repository:

#+BEGIN_QUOTE
  “PDF Tools is, among other things, a replacement of DocView for PDF files. The
  key difference is, that pages are not pre-rendered by e.g. ghostscript and
  stored in the file-system, but rather created on-demand and stored in memory.”
#+END_QUOTE

Features:
- Searching and slicing with =occur=.
- Show document headings in outline buffer.
- Manipulate annotations.
- Fit PDF to screen.

** epub layer
[[file:+readers/epub/README.org][link]]
This layer provides support for reading EPUB-formatted eBooks in Spacemacs using the
excellent [[https://github.com/wasamasa/nov.el][nov.el]] package.

Features:
- Basic navigation (jump to TOC, previous/next chapter)
- Remembering and restoring the last read position
- Jump to next chapter when scrolling beyond end
- Renders EPUB2 (.ncx) and EPUB3 (<nav>) TOCs
- Hyperlinks to internal and external targets
- Supports textual and image documents
- View source of document files
- Metadata display
- Image rescaling

** Dash layer
[[file:+readers/dash/README.org][link]]
This layer integrates offline api browsers into emacs. It provides one for OS X, Linux and Windows.

Features:
- Searching for word at point in offline api browser’s UI.
- Integration of offline api browser search results in helm and ivy.
- Support for [[https://kapeli.com/dash][dash]] offline api browser for OS X.
- Support for [[https://zealdocs.org/][zeal]] offline api browser for Linux.

** Deft layer
[[file:+readers/deft/README.org][link]]
This layer adds a search driven note taking system into Spacemacs.

Features:
- Browsing and creating notes with a powerfull search function via [[http://jblevins.org/projects/deft/][Deft]].
- Integration of =org-mode= as note editor.
- Configurable list of extensions to recognize as notes.

** Elfeed layer
[[file:+readers/elfeed/README.org][link]]
This layer integrates a web feed reader into spacemacs.

Features:
- Support for reading RSS and Atom feeds directly within emacs via [[https://github.com/skeeto/elfeed][Elfeed]].
- Support for managing feeds via org files supplied by [[https://github.com/remyhonig/elfeed-org][elfeed-org]].
- Support for displaying feed database content in the browser via [[https://github.com/skeeto/elfeed#web-interface][web interface]].

** Speed Reading layer
[[file:+readers/speed-reading/README.org][link]]
A speed reading mode for Emacs.

Features:
- Support for =speed-reading= of arbitrary texts

* Programming languages
** General-purpose
*** Imperative
**** Forth layer
[[file:+lang/forth/README.org][link]]
This layer adds basic support for the Forth family of languages to spacemacs.

Features:
- Syntax highlighting
- Showing meaning of objects in context of the current =Forth= session.
- Eval of entire files or regions in current =Forth= session.
- Passing interactive commands to current =Forth= session.

**** asm layer
[[file:+lang/asm/README.org][link]]
This layer adds support for Assembly code. The built-in major mode for
editing assembly code in Emacs is =asm-mode=.

The layer also adds =nasm-mode= for NASM-specific syntax. Although =nasm-mode=
is intended for NASM, it actually works well with other variants of Assembly
in general, and provides Imenu integration so you can jump around with ~SPC s j~.

Features:
- Improved syntax highlighting.
- Automatic indentation.
- Auto-completion for symbol in opened buffers.
- Look up documentation for current instruction at cursor.
- Imenu integration.

* Source control
** Version-Control layer
[[file:+source-control/version-control/README.org][link]]
This layers adds general configuration for [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Version-Control.html][Emacs VC]].
It should work with all VC backends such as Git, Mercurial, Bazaar, SVN, etc...

Features:
- highlights uncommitted changes in the fringe or margin with [[https://github.com/dgutov/diff-hl][diff-hl]], [[https://github.com/syohex/emacs-git-gutter][git-gutter]], or [[https://github.com/nonsequitur/git-gutter-plus][git-gutter+]]
- adds vcs transient-state ~SPC g.~ to allow quick navigation and modification of buffer hunks.

** GitHub layer
[[file:+source-control/github/README.org][link]]
This layers adds support for [[http://github.com][GitHub]].

Features:
- [[https://github.com/vermiculus/magithub][magithub]]: Magit-integrated interface to [[https://hub.github.com/][hub]] command line
- [[https://github.com/magit/forge][forge]]: integration with various forges, such as GitHub and GitLab.
- [[https://github.com/defunkt/gist.el][gist.el]]: full-featured mode to browse and post GitHub gists.
- [[https://github.com/sshaw/git-link][git-link]]: quickly generate URLs for commits or files.
- [[https://github.com/dgtized/github-clone.el][github-clone]] allows for easy cloning and forking of repositories.

** Perforce layer
[[file:+source-control/perforce/README.org][link]]
This layer integrates =Perforce= SCM system into spacemacs.

Features:
- Support for running [[https://www.perforce.com/][Perforce]] (p4) SCM commands directly from emacs.

** Git layer
[[file:+source-control/git/README.org][link]]
This layers adds extensive support for [[http://git-scm.com/][git]] to Spacemacs.

Features:
- git repository management the indispensable [[http://magit.vc/][magit]] package
- [[https://github.com/jtatarik/magit-gitflow][git-flow]] add-on for magit.
- quick in buffer history browsing with [[https://melpa.org/#/git-timemachine][git-timemachine]].
- quick in buffer last commit message per line with [[https://github.com/syohex/emacs-git-messenger][git-messenger]]
- colorize buffer line by age of commit with [[https://github.com/syohex/emacs-smeargle][smeargle]]
- git grep with [[https://github.com/yasuyk/helm-git-grep][helm-git-grep]]
- gitignore generator with [[https://github.com/jupl/helm-gitignore][helm-gitignore]]
- org integration with magit via [[https://github.com/magit/orgit][orgit]]

New to Magit? Checkout the [[https://magit.vc/about/][official intro]].

* Spacemacs
** Distributions
*** spacemacs-docker distribution
[[file:+distributions/spacemacs-docker/README.org][link]]
Spacemacs distribution that aims to automate dependency installation for
Spacemacs layers and provide well tested Docker based development environment
with GUI support on all major platforms and even [[https://i.imgur.com/wDLDMZN.gif][your web browser]].

Features:
- Automatically get Spacemacs layers dependency installed with [[https://github.com/syl20bnr/spacemacs/blob/develop/layers/%2Bdistributions/spacemacs-docker/deps-install/README.org][installer scripts]]
- Reap the benefit of Emacs and other GNU/Linux tools on Windows/MacOS machines
- Use [[https://hub.docker.com/][docker hub]] to auto-build your environment and store full backups for free
- Build once and work with the same development environment everywhere
- Run untrusted/risky code in the tunable sandbox with CPU/network/disk quotas
- Try new tools, experiment and roll back changes when something goes wrong
- Share your setup with others or extend someone else’s development environment
- Run multiple Emacs instances on the same machine isolated
- An easy way to swap Emacs version (=emacs25= =emacs-snapshot=) for debugging
- [[https://docs.docker.com/engine/reference/commandline/pause/][pause]] container to free resources temporarily
- [[https://github.com/docker/docker/blob/1.13.x/experimental/checkpoint-restore.md][Checkpoint & Restore]] - maybe the fastest way to start a “heavy” environment
- Friendly for networks with low upload speed/quotas.

** Utilities
*** Spacemacs-purpose layer
[[file:+spacemacs/spacemacs-purpose/README.org][link]]
This layer enables [[https://github.com/bmag/emacs-purpose][window-purpose]], which provides an alternative, purpose-based
window manager for Emacs. With this layer, your window layout should be robust
and shouldn’t change too much when opening all sorts of buffers.

Regular [[https://github.com/m2ym/popwin-el][popwin]] is not triggered when window-purpose is enabled. However,
the window-purpose layer provides a =purpose-popwin= extension, which
brings popwin’s behavior to window-purpose and solves that problem.

Features:
- Window layout is more robust and less likely to change unintentionally
- Dedicate window to a purpose
- User-defined purposes
- Extensible window display behavior
- Empty =purpose-mode-map=, to avoid conflicts with other key maps
- Replicate popwin behavior for purpose-mode - almost no regression in popup behavior from using window-purpose.
- Reuses popwin’s settings: =popwin:special-display-config=, =popwin:popup-window-height= and =popwin:popup-window-width=.
- Difference from popwin: when several windows are open, popup window is sometimes bigger than with regular popwin in the same situation.

* Tagging
** Helm Gtags layer
[[file:+tags/gtags/README.org][link]]
=counsel-gtags=, =helm-gtags= and =ggtags= are clients for GNU Global. GNU
Global is a source code tagging system that allows querying symbol locations in
source code, such as definitions or references. Adding the =gtags= layer enables
both of these modes.

Features:
- Select any tag in a project retrieved by gtags
- Resume previous helm-gtags session
- Jump to a location based on context
- Find definitions
- Find references
- Present tags in current function only
- Create a tag database
- Jump to definitions in file
- Show stack of visited locations
- Manually update tag database
- Jump to next location in context stack
- Jump to previous location in context stack
- Jump to a file in tag database
- Enables =eldoc= in modes that otherwise might not support it.
- Enables =company complete= in modes that otherwise might not support it.

** Cscope layer
[[file:+tags/cscope/README.org][link]]
This layer provides bindings for using [[http://cscope.sourceforge.net][Cscope]] and [[https://github.com/portante/pycscope][PyCscope]] in Spacemacs.

See [[https://github.com/OpenGrok/OpenGrok/wiki/Comparison-with-Similar-Tools][here]] for a comparison between =Cscope= and other similar tools (such as gtags).

Features:
- Tag indexing and searching for C-C++ via [[http://cscope.sourceforge.net][Cscope]]
- Tag indexing and searching for python via [[https://github.com/portante/pycscope][PyCscope]]

* Themes
** Themes Megapack layer
[[file:+themes/themes-megapack/README.org][link]]
This layer installs around 100 themes for Emacs.

Features:
- Have access to all included themes in this [[http://themegallery.robdor.com][theme gallery]] from [[http://www.twitter.com/robmerrell][Rob Merrell]].
- Easily try a theme by invoking helm-themes with: ~SPC T s~.

** Colors layer
[[file:+themes/colors/README.org][link]]
This layer colors your life by enhancing the existing coloration of identifiers as well as providing you with a more colorful
process indicator.

Features:
- Colorize all identifiers (christmas tree mode :-)) with mostly unique colors, and the ability to choose saturation and lightness
  with [[https://github.com/Fanael/rainbow-identifiers][rainbow-identifiers]].
- Colorize only identifiers recognized as variables with [[https://github.com/ankurdave/color-identifiers-mode][color-identifiers]].
- Colorize strings representing colors with the color they represent as background with
  [[https://jblevins.org/log/rainbow-mode][rainbow-mode]].
- Display a Nyan cat progress bar in the mode-line with [[https://github.com/syl20bnr/nyan-mode][nyan-mode]].

** Theming layer
[[file:+themes/theming/README.org][link]]
This layer allows for a simple way of modifying themes.

Features:
- Modify themes from your =.spacemacs=.
- Tweak face attributes and other aspects of themes.
- Includes three additional layer variables for tweaking headings.

* Tools
** CFEngine layer
[[file:+tools/cfengine/README.org][link]]
This layer adds support for CFEngine policies to Spacemacs.

Features:
- Syntax highlighting
- On the fly syntax checking via =flycheck= integration.
- Auto completion via =company= integration.
- Execution of =cfengine3= =SRC= blocks in =org-mode= via =ob-cfengine3= package.

** Node layer
[[file:+tools/node/README.org][link]]
This layer introduces packages that target Node.js. Currently this layer should
not be used directly, as it will be used by other layers.

Features:
- Integration of packages necessary to execute node.js modules from other layers.

** Ansible layer
[[file:+tools/ansible/README.org][link]]
This layer adds support for editing Ansible configuration files in Spacemacs.

Features:
- Syntax highlighting for Ansible-flavored YAML and Jinja2 templates.
- Auto-completion via =company-ansible=.
- Integration of =ansible-vault= into emacs for automatic encryption/decryption of files.

** LSP layer
[[file:+tools/lsp/README.org][link]]
This layer adds support for basic language server protocol packages speaking
[[https://microsoft.github.io/language-server-protocol/specification][language server protocol]].

Different language servers may support the language server protocol to varying degrees
and they may also provide extensions; check the language server’s website for
details.
=M-x lsp-describe-session= in a LSP buffer to list capabilities of the server.

Features:
- Cross references (definitions, references, document symbol, workspace symbol
  search and others)
- Workspace-wide symbol rename
- Symbol highlighting
- Flycheck
- Completion with =company-lsp=
- Signature help with eldoc
- Symbol documentation in a child frame (=lsp-ui-doc=)
- Navigation using imenu
- Consistent core key bindings in LSP modes

** command-log layer
[[file:+tools/command-log/README.org][link]]
This layer adds a handy command demonstration mode to Spacemacs.

Features:
- Support for logging all entered keys and triggered commands in a designated buffer via [[https://github.com/lewang/command-log-mode][command-log-mode]].
- Provides the best way to demonstrate the connection between keystrokes and commands in emacs.
- Provides an easy way to create command logs for training classes.

** Restclient layer
[[file:+tools/restclient/README.org][link]]
This layer provides a REPL-like interface for http requests.

Features:
- REPL for http requests via [[https://github.com/pashky/restclient.el][restclient]]
- Alternative =org= integration via [[http://github.com/zweifisch/ob-http][ob-http]]

** import-js layer
[[file:+tools/import-js/README.org][link]]
This layer adds support for [[https://github.com/Galooshi/import-js][import-js]]

Features:
- Import Javascript/Typescript modules to buffer
- Import missing modules and remove unused one
- Go to module location

** systemd layer
[[file:+tools/systemd/README.org][link]]
This layer adds support for editing =systemd= configuration files in Spacemacs.

Features:
- Syntax highlighting
- Auto completion
- Syntax checking via =systemd-analyze=

** Saltstack layer
[[file:+tools/salt/README.org][link]]
This layer provides syntax highlighting for Saltstack files.

Features:
- Syntax highlighting
- Display of salt documentation

** Ranger layer
[[file:+tools/ranger/README.org][link]]
This layer brings Ranger features to spacemacs from the =ranger= package.

To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =ranger= to the existing =dotspacemacs-configuration-layers= list in this
file.

To default with preview enabled when entering ranger:

#+BEGIN_SRC emacs-lisp
  (setq-default dotspacemacs-configuration-layers
                '(ranger :variables
                         ranger-show-preview t))
#+END_SRC

Features:
- use ranger to display dired with ranger like preview and stacked parent windows.

** Rebox layer
[[file:+tools/rebox/README.org][link]]
This layer adds support for [[https://github.com/lewang/rebox2][rebox2]] package which is a minor-mode allowing
to easily add ASCII text boxes to a buffer.

A nice video demonstration by the package author can be found [[https://www.youtube.com/watch?v=53YeTdVtDkU][here]].

Features:
- Auto-wrap correctly in comments,
- Auto-fill correctly in comments,
- Boxes auto-adapt as text is inserted or deleted,
- ~S-RET~ to continue a comment on the next line,
- Kill/yank within the box,
- Apparently works well with ancient =filladpt-mode= (see authors video).

** DAP layer
[[file:+tools/dap/README.org][link]]
Experimental integrated visual debugger using [[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]].

[[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]] is a wire protocol for communication between client and
Debug Server. It similar to the [[https://github.com/Microsoft/language-server-protocol][LSP]] but providers integration with debug
server.

Features:

Fully featured IDE-like debugger providing:
- Launch/Attach
- Breakpoints
- Exceptions
- Pause & Continue
- Step In/Out/Over
- Callstacks
- Threads
- Multiple simultaneous debug sessions
- Evaluating statements
- Debug/Run configurations
- Debug REPL

** bm layer
[[file:+tools/bm/README.org][link]]
[[https://github.com/joodland/bm/blob/master/README.md][BM]] provides visible, buffer local, bookmarks and the ability to jump forward and backward to the next bookmark.

Features:
- Auto remove bookmark after jump to it by =bm-next= or =bm-previous=
- Cycle through bookmarks in all open buffers in LIFO order
- Toggle bookmarks. Jump to next/previous bookmark.
- Setting bookmarks based on a regexp. (Useful when searching logfiles.)
- Mouse navigation.
- Annotate bookmarks.
- Different wrapping modes.
- Different bookmarks styles, line-only, fringe-only or both.
- Persistent bookmarks.
- List bookmarks (in all buffers) in a separate buffer.
- Cycle through bookmarks in all open buffers.

** Terraform layer
[[file:+tools/terraform/README.org][link]]
This layer provides basic support for Terraform =.tf= files.

Features:
- Basic syntax highlighting via [[https://github.com/syohex/emacs-terraform-mode][terraform-mode]]
- Auto formatting on save via =terraform fmt=

** Transmission layer
[[file:+tools/transmission/README.org][link]]
This layer integrates a BitTorrent client into Spacemacs.

Features:
- Integration of [[https://transmissionbt.com/][Transmission]] into emacs.

** Docker layer
[[file:+tools/docker/README.org][link]]
This layer integrates basic container management into Spacemacs.

Features:
- Syntax highlighting for =Docker= files
- =Docker= build integration
- =TRAMP= access to running Docker containers
- =Docker= container and image management via [[https://github.com/Silex/docker.el][docker.el]]
- =docker-compose= integration via [[https://github.com/Silex/docker.el][docker.el]]
- Syntax checking via [[https://github.com/hadolint/hadolint][hadolint]]

** Vagrant layer
[[file:+tools/vagrant/README.org][link]]
This layer adds support for working with Vagrant using [[https://github.com/ottbot/vagrant.el][vagrant.el]] and
[[https://github.com/dougm/vagrant-tramp][vagrant-tramp]].

Features:
- Manage boxes (under the ~SPC a V~ prefix)
- Remote editing on Vagrant boxes via Tramp

** YCMD layer
[[file:+tools/ycmd/README.org][link]]
This layer adds [[https://github.com/abingham/emacs-ycmd][emacs-ycmd]] support.

Features:
- [[https://github.com/Valloric/YouCompleteMe][YouCompleteMe]] based code-completion
- Integrations with company, flycheck, and eldoc

** Sphinx layer
[[file:+tools/sphinx/README.org][link]]
The layer adds support for the documentation generation system =Sphinx= to
the =restructuredtext= layer.

Features:
- Support for =Sphinx= project compilation
- Support for opening =Sphinx= project target
- Support for opening =Sphinx= config file

** xclipboard layer
[[file:+tools/xclipboard/README.org][link]]
=xclipboard= integration layer.

Features:
- adds copy support to the X-clipboard from the terminal.
- adds paste support to the X-clipboard from the terminal.

** Shell layer
[[file:+tools/shell/README.org][link]]
This layer configures the various shells available in Emacs.

Features:
- Shell integration

** Tern layer
[[file:+tools/tern/README.org][link]]
This layer adds support for [[http://ternjs.net/][tern]] stand-alone code-analysis engine for
JavaScript.

Features:
- TODO: list the feature of tern supported by tern package

** fasd layer
[[file:+tools/fasd/README.org][link]]
This layer integrates the [[https://github.com/clvv/fasd][fasd]] command line tool into spacemacs.

Features:
- Adds easy shortcuts to reference recent files and directories.
- Provides =fasd= with recent open file lists from emacs.
- Allows to filter =fasd= results with =helm= or =ivy=.

** Finance layer
[[file:+tools/finance/README.org][link]]
This layer integrates a full fledged accounting system into Spacemacs.

Features:
- Support for maintaining a double-entry accounting system run by text files via [[https://www.emacswiki.org/emacs/LedgerMode][ledger-mode]].
- Display of finance reports directly within emacs.
- Integration of emacs calculator mode for editing post amounts.
- Support for easy account reconciliation via =Ledger-Reconcile=.
- Extended support for ~evil~ style editing with [[https://github.com/atheriel/evil-ledger][evil-ledger]].

** Tmux layer
[[file:+tools/tmux/README.org][link]]
This layer adds basic =tmux= key bindings to Spacemacs.

Features:
- Calling of =tmux= navigation commands directly from emacs via [[https://github.com/keith/evil-tmux-navigator][evil-tmux-navigator]].

** Chrome layer
[[file:+tools/chrome/README.org][link]]
This layer provides some integration with the Google Chrome browser.

Features:
- Edit text boxes with Emacs using [[https://github.com/stsquad/emacs_chrome][edit-server]]
- Write markdown in Emacs and realtime show in chrome using [[https://github.com/mola-T/flymd][flymd]]
- gmail message mode uses standard markdown key bindings

** web-beautify layer
[[file:+tools/web-beautify/README.org][link]]
This layer adds support for [[https://github.com/yasuyk/web-beautify][web-beautify]].

Features:
- Format buffer to be beautiful

** nginx layer
[[file:+tools/nginx/README.org][link]]
This layer adds support for configuring [[http://nginx.org][nginx]] a powerful alternative for
the apache web server.

Features:
- Syntax highlighting of nginx configuration files via [[https://github.com/ajc/nginx-mode][nginx-mode]].
- Syntax-aware indentation

** Pass layer
[[file:+tools/pass/README.org][link]]
This layer adds intregration with [[http://www.passwordstore.org/][pass]], the unix password manager.
You must have ~pass~ installed and available in your path for this layer to
function properly.

Features:
- Use Spacemacs as your password manager

** Geolocation layer
[[file:+tools/geolocation/README.org][link]]
This layer offers location sensitive adjustments to Emacs.

Features:
- Supports the following adjustments:
  - Automatic switching between light (day) and dark (night) themes via [[https://github.com/hadronzoo/theme-changer][theme-changer]]
  - Local weather forecast via [[https://github.com/aaronbieber/sunshine.el/blob/master/sunshine.el][sunshine]]
  - Integration with OS X’s CoreLocation service via [[https://github.com/purcell/osx-location][osx-location]]
  - Manual location setting via variables in your dotfile

** Prodigy layer
[[file:+tools/prodigy/README.org][link]]
This layer adds support for the [[https://github.com/rejeep/prodigy.el][prodigy]] package to manage external services from
within Emacs, check the package’s documentation for more details.

It is recommended to put your prodigy services in the =dotspacemacs/user-config=
part of your =~/.spacemacs= file.

Features:
- Managing of pre-declared services from within emacs
- Showing of process output in special buffers
- Filtering of processes for tags or names

** CMake layer
[[file:+tools/cmake/README.org][link]]
This layer adds support [[https://cmake.org/][CMake]] scripts.

Features:
- Support for CMake configure/build (with limited support for other build systems),
  automatic generation of =compile_commands.json= (compile flags), on-the-fly configuration
  of flycheck, company-clang and RTags (if installed) with [[https://github.com/atilaneves/cmake-ide][cmake-ide]].
- Run selected test using =Helm= interface via =helm-ctest=.

** imenu-list layer
[[file:+tools/imenu-list/README.org][link]]
This layer uses [[https://github.com/bmag/imenu-list][imenu-list]] to show the current buffer’s index in a side bar.

This is similar to `SPC j i` but displayed in a persistent sidebar instead of
a completion buffer.

Features:
- IDE like outline view of current buffer showing all significant symbols in one view

** debug layer
[[file:+tools/debug/README.org][link]]
This layer adds interactive debuggers for multiple languages using [[https://github.com/realgud/realgud][realgud]].

Features:
- Modern rewrite of the Emacs GUD debugger family
- Visual interface including breakpoint and line indicators
- Advanced features like stack frame navigation and mouse support
- Extensible framework for [[https://github.com/realgud/realgud/wiki/How-to-add-a-new-debugger][adding]] your own external debuggers

** prettier layer
[[file:+tools/prettier/README.org][link]]
This layer adds support for [[https://github.com/prettier/prettier][prettier]]

Features:
- Format buffer in a consistent style

** Pandoc layer
[[file:+tools/pandoc/README.org][link]]
This layer adds support for [[http://pandoc.org/][Pandoc]].

Pandoc is a universal document converter. It makes it easy to e.g. convert a
Markdown file to org mode or vice versa. It can also export your text to PDF or
DOCX.

Features:
- Mode independent document conversions via =global pandoc menu=
- =Org-export= integration via [[https://github.com/kawabata/ox-pandoc][ox-pandoc]]

** Puppet layer
[[file:+tools/puppet/README.org][link]]
This layer provides support for the Puppet DSL to Spacemacs.

Features:
- Syntax highlighting via [[https://github.com/voxpupuli/puppet-mode][puppet-mode]]
- Syntax-checking via [[http://puppet-lint.com/][puppet-lint]]
- Navigation commands to jump between blocks
- Applying the content of the current manifest directly from emacs

* Vim
** Evil-snipe layer
[[file:+vim/evil-snipe/README.org][link]]
This layer adds various replacements for vim’s default search functions.

Features:
- Alternative implementation of vim’s default search operations.
- Replacement of evil-surround with a two-character search.
- Support for alternative scopes for default search operations.
- Support for alternative motions based on configurable regexps.

** Vim-empty-lines layer
[[file:+vim/vim-empty-lines/README.org][link]]
This layer is a drop-in replacement for the =vi-tilde-fringe= mode, for those
who desire behaviour closer to =vim=’s.

It has better compatibility with retina displays, as it uses a text overlay
using your font, rather than a pixel-art tilde. The empty line indicators are
overlaid in within the buffer as in =vim=, and not in the fringe. The indicator
behaviour with trailing empty lines matches =vim=’s behaviour.

For details, see the [[https://github.com/jmickelin/vim-empty-lines-mode][vim-empty-lines-mode]] repository.

Features:
- Emulation of original vim behaviour.
- Brings you as close to vim as one can be without using vim itself.

** Evil-commentary layer
[[file:+vim/evil-commentary/README.org][link]]
This layer replaces [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] with [[https://github.com/linktohack/evil-commentary][evil-commentary]] for those
who prefer the behaviour of [[https://github.com/tpope/vim-commentary][vim-commentary]].

Features:
- Provides the original vim behaviour for commenting out lines via [[https://github.com/linktohack/evil-commentary][evil-commentary]].

** Vinegar layer
[[file:+vim/vinegar/README.org][link]]
This layer is a port of vim-vinegar for emacs.

It is based on tpope’s [[https://github.com/tpope/vim-vinegar][vinegar.vim]], simplifying =dired=
with a limited number of details and exposing the ~-~ command in all
buffers to enter dired.

Features:
- navigation up folders with ~-~ key
- simplify dired buffer to show only file names
- better evil/vim bindings for navigation within dired buffer
- keep only one active dired buffer
- Use dired-k extension to show time / vcs related information in
  single bar
- right mouse click moves up directory if in blank space or shows context menu

* Web services
** Evernote layer
[[file:+web-services/evernote/README.org][link]]
This layer adds support for the famous [[https://evernote.com/][Evernote]] note taking service to Spacemacs.
It does so by grouping together various packages to work with [[https://evernote.com/][Evernote]].

Features:
- Create notes in markdown and sync with [[https://evernote.com/][Evernote]] via [[http://www.geeknote.me][geeknote]].
- Search for notes using keywords
- Move notes between notebooks

** Twitter layer
[[file:+web-services/twitter/README.org][link]]
This layer adds Twitter support to Spacemacs via the package [[https://github.com/hayamiz/twittering-mode][twittering-mode]].

Features:
- Activities on Twitter
  - Viewing various timelines
    - Home timeline
    - Replies
    - User’s timeline
    - Public timeline
    - Favorites timeline
    - Retweets timeline
    - Merged timeline
    - Timeline without tweets satisfying a condition
  - Posting tweets
    - Direct message
    - ReTweet
    - Hash tag
    - Signature
  - Following and removing users
  - Marking tweets as favorites
- HTTP Proxy support
- Secure connection via HTTPS (cURL, GNU Wget, OpenSSL or GnuTLS is required)

** Wakatime layer
[[file:+web-services/wakatime/README.org][link]]
This layer adds support for Wakatime.

WakaTime was built to solve time tracking for programmers.
Since we work inside a text editor, why should we have to start and stop a
timer? WakaTime uses open-source text editor plugins to automatically track the
time you spend programming so you never have to manually track it again!

P.S. wakati means time in Swahili

Features:
- Integration with Wakatime cloud based time tracking service

** Confluence layer
[[file:+web-services/confluence/README.org][link]]
This layer adds support for Atlassian [[https://www.atlassian.com/software/confluence][Confluence]].

Features:
- Creating/editing of Confluence pages
- Exporting of org buffers to Confluence =wiki= format

** Search Engine layer
[[file:+web-services/search-engine/README.org][link]]
This layer adds support for the [[https://github.com/hrs/engine-mode][Search Engine]] package.

Features:
- Browser search integration
