#+TITLE: Smart Tabs layer

# TOC links should be GitHub style anchors.
* Table of Contents                                        :TOC_4_gh:noexport:
 - [[#description][Description]]
 - [[#install][Install]]
 - [[#configuration][Configuration]]
   - [[#built-in-languages][Built-in languages]]
   - [[#adding-support-for-additional-languages][Adding support for additional languages]]
   - [[#respecting-evil-customizations][Respecting evil customizations]]

* Description
The best whitespace is neither spaces nor tabs, it's spaces *and* tabs!

This layer brings =smart-tabs-mode= integration, a minor mode that intelligently
indents your code with tabs, while preserving spaces for alignment and ASCII
art. In this way, multiple team members can choose their preferred tab length
without breaking alignment. To enable =smart-tabs-mode= for a given language,
you *insinuate* it (see instructions below, under [[*configuration][Configuration]]).

If =indent-tabs-mode= is set to nil, you'll always indent with spaces, even if
=smart-tabs-mode= is on. Nevertheless, it is recommended that =indent-tabs-mode=
is left =nil= by default; the layer will handle turning it on for the languages
you insinuate. =smart-tabs-mode= will use =tab-width= as its indent offset.

Please see [[https://www.emacswiki.org/emacs/SmartTabs][Smart Tabs on the Emacs Wiki]] if you would like more information on
the underlying mode.

* Install
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =smart-tabs= to the existing =dotspacemacs-configuration-layers= list in
this file.

* Configuration
** Built-in languages
=smart-tabs-mode= comes with built-in configurations for these languages:

| Language   | Mode          | Symbol       |
|------------+---------------+--------------|
| C          | =c-mode=      | =c=          |
| C++        | =c++-mode=    | =c++=        |
| Java       | =java-mode=   | =java=       |
| JavaScript | =js2-mode=    | =javascript= |
| Perl       | =cperl-mode=  | =cperl=      |
| Python     | =python-mode= | =python=     |
| Ruby       | =ruby-mode=   | =ruby=       |
| XML        | =nxml-mode=   | =nxml=       |

By default, none of these will be insinuated. To use =smart-tabs-mode= with any
   of these languages, set the layer variable =smart-tabs-default-insinuations=
   to a list of any or all of the symbols listed above.

#+BEGIN_SRC emacs-lisp
  (setq-default dotspacemacs-configuration-layers '(
    (smart-tabs :variables
                smart-tabs-default-insinuations '(c c++ cperl javascript java))
   ))
#+END_SRC

** Adding support for additional languages
You should use the new =smart-tabs-add-language-and-insinuate= macro to add
support for additional language. You can call this in your
=dotspacemacs/user-config= function to enable support for any other languages
you use. The arguments are:

 - A symbol to represent the language. This value is mostly unimportant; the
   only rule is that you can't use the same symbol twice.
 - The mode hook for the major mode you want to associate with this language.
 - An alist of indent rules. Each rule is a cons cell containing an indent
   function followed by the indent offset variable used by that function.
 - Optionally, any number of body parameters to be executed in the language's
   mode hook after enabling =smart-tabs-mode=.

Here's an example that adds support for Groovy via =groovy-mode=.

#+BEGIN_SRC emacs-lisp
  (defun dotspacemacs/user-config ()

  ;; ...

    (smart-tabs-add-language-and-insinuate groovy groovy-mode-hook
     ;; Note that Groovy mode, like many other C-like languages, simply reuses
     ;; Emacs' core C indentation commands
     ((c-indent-line . c-basic-offset)
      (c-indent-region . c-basic-offset))))
#+END_SRC

** Respecting evil customizations
Because =evil= uses its own indentation functions, by default =smart-tabs-mode=
will not work with evil's indentation operator, ~=~. It's possible to work
around this by making buffer-local changes to =evil-shift-width= and
=evil-indent-convert-tabs=, two customizations provided by the evil package. By
default, the layer will handle this for you; however, if you have customized
those values yourself and want the layer to respect your values, you can disable
this behavior by setting the layer variable
=smart-tabs-respect-evil-customizations= to =t=.

#+BEGIN_SRC emacs-lisp
  (setq-default dotspacemacs-configuration-layers '(
    (smart-tabs :variables
                smart-tabs-respect-evil-customizations t)))
#+END_SRC
